name: CI Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main      

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout Code
    - name: Checkout repository
      uses: actions/checkout@v2

    # 2. Install Dependencies and Run Tests
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: pip install -r app/requirements.txt

    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/app" >> $GITHUB_ENV

    - name: Run tests
      run: pytest app/tests

    # 3. Build Docker Image
    - name: Build Docker image
      id: set-image-tag
      env:
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-app:${IMAGE_TAG} .
        echo "image_tag=${IMAGE_TAG}" >> image_tag.txt
        echo "::set-output name=image_tag::${IMAGE_TAG}"

    # 4. Save Image Tag as Artifact
    - name: Upload Image Tag Artifact
      uses: actions/upload-artifact@v4
      with:
        name: image-tag
        path: image_tag.txt

    # 5. Scan Docker Image
    # - name: Run Trivy Image Scan
    #   uses: aquasecurity/trivy-action@0.28.0
    #   env:
    #     IMAGE_TAG: ${{ github.run_number }}
    #   with:
    #     image-ref: ${{ secrets.DOCKER_USERNAME }}/flask-app:${{ env.IMAGE_TAG }}
    #     format: table
    #     ignore-unfixed: true

    # 6. Login to DockerHub
    - name: Log in to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # 7. Push Docker Image to DockerHub
    - name: Push Docker image to DockerHub
      env:
        IMAGE_TAG: ${{ steps.set-image-tag.outputs.image_tag }}
      run: docker push ${{ secrets.DOCKER_USERNAME }}/flask-app:${{ env.IMAGE_TAG }}

    # 8. Build Helm Chart
    - name: Build Helm Charts
      run: helm package helm/flask-app
