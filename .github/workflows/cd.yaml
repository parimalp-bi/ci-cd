name: CD Pipeline

on:
  workflow_run:
    workflows:
      - CI Pipeline
    types:
      - completed

jobs:
  cd:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout Code
    - name: Checkout repository
      uses: actions/checkout@v2

    # 2. Download Image Tag Artifact
    - name: Download Image Tag Artifact from CI
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}    
      run: |
        CI_RUN_ID=$(gh api -H "Accept: application/vnd.github+json" /repos/${{ github.repository }}/actions/runs \
        | jq -r '.workflow_runs[] | select(.name=="CI Pipeline") | .id' | head -n 1)
        echo "Found CI Workflow Run ID: $CI_RUN_ID"

        ARTIFACT_URL=$(gh api -H "Accept: application/vnd.github+json" /repos/${{ github.repository }}/actions/runs/$CI_RUN_ID/artifacts \
        | jq -r '.artifacts[] | select(.name=="image-tag") | .archive_download_url')

        echo "Downloading Artifact: $ARTIFACT_URL"
        curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -L -o image-tag.zip $ARTIFACT_URL
        unzip image-tag.zip

    - name: Read Image Tag
      run: |
        IMAGE_TAG=$(cat image_tag.txt)
        echo "Image Tag: $IMAGE_TAG"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    # 3. Install kubectl
    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    # 4. Set Up kind
    - name: Set up kind
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind
        kind create cluster --name test-cluster

    # 5. Install Helm
    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

    # - name: Pull Docker Image from Docker Hub
    #   env:
    #     IMAGE_TAG: ${{ env.IMAGE_TAG }}
    #   run: docker pull ${{ secrets.DOCKER_USERNAME }}/flask-app:${IMAGE_TAG}

    # # 6. Load Docker Image into kind
    # - name: Load Docker Image into kind
    #   env:
    #     IMAGE_TAG: ${{ env.IMAGE_TAG }}
    #   run: kind load docker-image ${{ secrets.DOCKER_USERNAME }}/flask-app:${IMAGE_TAG} --name test-cluster

    # 7. Deploy Application with Helm
    - name: Deploy Application with Helm
      env:
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
      run: |
        helm upgrade --install flask-app ./helm/flask-app  \
          --set image.repository=${{ secrets.DOCKER_USERNAME }}/flask-app \
          --set image.tag=${IMAGE_TAG} \
          --set image.pullPolicy=Always \
          --set service.type=NodePort

    # 8. Test Application
    - name: Test Application
      run: |
        echo "Waiting for the pod to be ready..."
        POD_NAME=""
        for _ in {1..5}; do
          POD_NAME=$(kubectl get pods -l app=app -o jsonpath="{.items[0].metadata.name}" 2>/dev/null || echo "")
          [[ -n "$POD_NAME" ]] && STATUS=$(kubectl get pod $POD_NAME -o=jsonpath='{.status.phase}') || STATUS=""
          if [[ "$STATUS" == "Running" ]]; then
            echo "Pod is running: $POD_NAME"
            break
          fi
          echo "Pod status: $STATUS. Retrying in 5 seconds..."
          kubectl describe pod ${POD_NAME}
          kubectl logs pod/${POD_NAME}
          sleep 10
        done

        if [[ "$STATUS" != "Running" ]]; then
          echo "Error: Pod did not start within the expected time."
          exit 1
        fi

        echo "Setting up port forwarding..."
        kubectl port-forward pod/$POD_NAME 5001:5001 &
        sleep 5
        echo "Testing the application..."
        curl --retry 5 --retry-delay 5 -s http://localhost:5001/

    # 9. Clean Up
    - name: Delete kind Cluster
      run: kind delete cluster --name test-cluster
